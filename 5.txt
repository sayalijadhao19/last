import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

# Generate synthetic data (blobs)
n_samples = 300  # Number of data points
n_features = 2  # Number of features (dimensions)
n_clusters = 5  # Number of clusters

# Create a synthetic dataset with `n_samples` points, `n_features` features, and `n_clusters` centers
X, _ = make_blobs(n_samples=n_samples, n_features=n_features, centers=n_clusters, random_state=42)

# Define a Particle class for the PSO algorithm
class Particle:
    def __init__(self, n_clusters, n_features):
        # Initialize particle's position (centroids) and velocity (rate of change in position)
        self.position = np.random.rand(n_clusters, n_features)  # Random positions for centroids
        self.velocity = np.random.randn(n_clusters, n_features) * 0.1  # Random velocity
        self.best_position = self.position.copy()  # Best known position (centroids)
        self.best_score = float('inf')  # Best fitness score (lower is better)

# Fitness function to evaluate the quality of a particle's position (centroids)
def fitness(particle, X):
    # Calculate distances between data points and centroids
    distances = np.sqrt(((X[:, np.newaxis, :] - particle.position[np.newaxis, :, :]) ** 2).sum(axis=2))
    # Find the minimum distance to any centroid for each point
    min_distances = distances.min(axis=1)
    # Return the mean of the minimum distances (lower is better)
    return np.mean(min_distances)

# Update particle's velocity based on personal and global best positions
def update_velocity(particle, global_best_position, w=0.5, c1=1, c2=1):
    r1, r2 = np.random.rand(2)  # Random numbers for cognitive and social terms
    # Cognitive component: attraction towards particle's own best position
    cognitive = c1 * r1 * (particle.best_position - particle.position)
    # Social component: attraction towards global best position
    social = c2 * r2 * (global_best_position - particle.position)
    # Update the velocity
    particle.velocity = w * particle.velocity + cognitive + social

# Update the particle's position based on its velocity
def update_position(particle):
    particle.position += particle.velocity
    # Ensure the position stays within the bounds [0, 1]
    particle.position = np.clip(particle.position, 0, 1)

# Main PSO clustering function
def pso_clustering(X, n_clusters, n_particles=20, n_iterations=100):
    # Initialize particles with random positions and velocities
    particles = [Particle(n_clusters, X.shape[1]) for _ in range(n_particles)]
    global_best_position = particles[0].position.copy()  # Global best position (centroids)
    global_best_score = float('inf')  # Global best score (fitness)

    # Iterate over the number of generations (iterations)
    for iteration in range(n_iterations):
        for particle in particles:
            # Calculate the fitness score of each particle
            score = fitness(particle, X)
            # If the current score is better than the particle's previous best, update it
            if score < particle.best_score:
                particle.best_score = score
                particle.best_position = particle.position.copy()

            # If the current score is better than the global best, update the global best
            if score < global_best_score:
                global_best_score = score
                global_best_position = particle.position.copy()

        # Update the velocity and position for each particle
        for particle in particles:
            update_velocity(particle, global_best_position)
            update_position(particle)

        # Print the best score every 10 iterations to monitor progress
        if iteration % 10 == 0:
            print(f"Iteration {iteration}: Best score = {global_best_score:.4f}")

    # Return the global best position (centroids of the clusters)
    return global_best_position

# Run PSO clustering to get the best centroids
best_centroids = pso_clustering(X, n_clusters)

# Assign points to clusters based on the closest centroid
distances = np.sqrt(((X[:, np.newaxis, :] - best_centroids[np.newaxis, :, :]) ** 2).sum(axis=2))
cluster_assignments = distances.argmin(axis=1)  # Get the index of the closest centroid for each point

# Visualize the clustering results
plt.figure(figsize=(10, 8))
plt.scatter(X[:, 0], X[:, 1], c=cluster_assignments, cmap='viridis')  # Plot data points, color-coded by cluster
plt.scatter(best_centroids[:, 0], best_centroids[:, 1], c='red', marker='x', s=200, linewidths=3)  # Plot centroids
plt.title('PSO Clustering Results')  # Title of the plot
plt.xlabel('Feature 1')  # Label for x-axis
plt.ylabel('Feature 2')  # Label for y-axis
plt.show()

# Print the final clustering results
print("\nClustering complete!")
print(f"Final centroids:\n{best_centroids}")
