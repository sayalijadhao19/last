import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Define fuzzy variables
temperature = ctrl.Antecedent(np.arange(16, 31, 1), 'temperature')  # Room temperature (16째C to 30째C)
desired_temp = ctrl.Antecedent(np.arange(18, 26, 1), 'desired_temp')  # Desired temperature (18째C to 25째C)
ac_power = ctrl.Consequent(np.arange(0, 11, 1), 'ac_power')  # AC power (0 to 10)

# Define membership functions for temperature
temperature['cold'] = fuzz.trimf(temperature.universe, [16, 16, 22])
temperature['comfortable'] = fuzz.trimf(temperature.universe, [20, 24, 28])
temperature['hot'] = fuzz.trimf(temperature.universe, [25, 30, 30])

# Define membership functions for desired temperature
desired_temp['low'] = fuzz.trimf(desired_temp.universe, [18, 18, 21])
desired_temp['medium'] = fuzz.trimf(desired_temp.universe, [20, 22, 24])
desired_temp['high'] = fuzz.trimf(desired_temp.universe, [23, 25, 25])

# Define membership functions for AC power
ac_power['low'] = fuzz.trimf(ac_power.universe, [0, 0, 5])
ac_power['medium'] = fuzz.trimf(ac_power.universe, [3, 5, 7])
ac_power['high'] = fuzz.trimf(ac_power.universe, [6, 10, 10])

# Define fuzzy rules
rule1 = ctrl.Rule(temperature['cold'] & desired_temp['high'], ac_power['low'])
rule2 = ctrl.Rule(temperature['cold'] & desired_temp['medium'], ac_power['medium'])
rule3 = ctrl.Rule(temperature['comfortable'] & desired_temp['low'], ac_power['low'])
rule4 = ctrl.Rule(temperature['comfortable'] & desired_temp['medium'], ac_power['medium'])
rule5 = ctrl.Rule(temperature['hot'] & desired_temp['low'], ac_power['high'])
rule6 = ctrl.Rule(temperature['hot'] & desired_temp['high'], ac_power['low'])

# Control system setup
ac_control_system = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6])
ac_control = ctrl.ControlSystemSimulation(ac_control_system)

# Input values
current_temperature = 28  # Example: Current room temperature
desired_temperature = 20  # Example: Desired temperature

# Pass inputs to the fuzzy controller
ac_control.input['temperature'] = current_temperature
ac_control.input['desired_temp'] = desired_temperature

# Compute the output
ac_control.compute()

# Display the output AC power
print(f"AC Power Output: {ac_control.output['ac_power']}")

# Visualize the result (optional)
temperature.view(sim=ac_control)
desired_temp.view(sim=ac_control)
ac_power.view(sim=ac_control)
