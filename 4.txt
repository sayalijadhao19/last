import numpy as np
import matplotlib.pyplot as plt

# Class to implement Ant Colony Optimization (ACO) for solving the Traveling Salesman Problem (TSP)
class AntColonyOptimization:
    def __init__(self, distances, n_ants, n_iterations, alpha=1, beta=2, rho=0.5, Q=10):
        # Initialize the ACO parameters and the distance matrix
        self.distances = distances  # Distance matrix representing distances between cities
        self.n_cities = len(distances)  # Number of cities (size of the distance matrix)
        self.n_ants = n_ants  # Number of ants to simulate
        self.n_iterations = n_iterations  # Number of iterations to run the algorithm
        self.alpha = alpha  # Pheromone importance (controls how much pheromone influences path choice)
        self.beta = beta  # Distance importance (controls how much distance influences path choice)
        self.rho = rho  # Pheromone evaporation rate (controls how fast pheromone dissipates)
        self.Q = Q  # Pheromone deposit factor (controls the amount of pheromone deposited on a path)
        self.pheromone = np.ones(self.distances.shape) / len(distances)  # Initialize pheromone matrix evenly
        self.best_path = None  # Variable to store the best path found
        self.best_path_length = float('inf')  # Variable to store the best path length found

    def run(self):
        # Main loop to run the ACO algorithm for the given number of iterations
        for iteration in range(self.n_iterations):
            paths = self.construct_paths()  # Construct paths for all ants
            self.update_pheromone(paths)  # Update pheromone levels based on paths found
            self.update_best_path(paths)  # Update the best path if a better one is found
            # Print progress every 10 iterations
            if iteration % 10 == 0:
                print(f"Iteration {iteration}: Best path length = {self.best_path_length:.2f}")
        return self.best_path, self.best_path_length  # Return the best path and its length

    def construct_paths(self):
        # Generate paths for all ants
        paths = []
        for ant in range(self.n_ants):
            path = self.construct_path_for_ant()  # Construct a path for a single ant
            paths.append(path)
        return paths

    def construct_path_for_ant(self):
        # Construct a path for a single ant by selecting cities based on pheromone and distance
        unvisited = list(range(self.n_cities))  # List of cities that have not been visited yet
        start = np.random.choice(unvisited)  # Randomly choose the starting city
        path = [start]  # The path starts at the chosen city
        unvisited.remove(start)  # Remove the starting city from the unvisited list
        while unvisited:  # While there are unvisited cities
            current = path[-1]  # Get the last city visited by the ant
            probabilities = self.calculate_probabilities(current, unvisited)  # Calculate transition probabilities
            next_city = unvisited[np.argmax(probabilities)]  # Choose the next city based on the probabilities
            path.append(next_city)  # Add the next city to the path
            unvisited.remove(next_city)  # Remove the chosen city from the unvisited list
        return path  # Return the complete path of the ant

    def calculate_probabilities(self, current, unvisited):
        # Calculate the transition probabilities for an ant to move from the current city to the unvisited cities
        pheromone = np.array([self.pheromone[current][j] for j in unvisited])  # Pheromone levels on edges
        distance = np.array([self.distances[current][j] for j in unvisited])  # Distances to unvisited cities
        # Attractiveness is a combination of pheromone level and inverse distance (more pheromone and shorter distance is better)
        attractiveness = pheromone ** self.alpha * ((1.0 / distance) ** self.beta)
        probabilities = attractiveness / np.sum(attractiveness)  # Normalize to get probabilities
        return probabilities

    def update_pheromone(self, paths):
        # Update the pheromone matrix based on the paths found by all ants
        self.pheromone *= (1 - self.rho)  # Evaporate pheromone (decay)
        for path in paths:  # For each path found by an ant
            path_length = self.calculate_path_length(path)  # Calculate the path length
            for i in range(self.n_cities):  # For each city in the path
                from_city, to_city = path[i], path[(i + 1) % self.n_cities]  # Get the current and next city
                # Add pheromone based on the inverse of the path length (shorter paths get more pheromone)
                self.pheromone[from_city][to_city] += self.Q / path_length
                self.pheromone[to_city][from_city] += self.Q / path_length  # Symmetric pheromone update

    def update_best_path(self, paths):
        # Update the best path found so far if a better one is found
        for path in paths:
            path_length = self.calculate_path_length(path)  # Calculate the length of the current path
            if path_length < self.best_path_length:  # If the current path is better than the best one found
                self.best_path = path  # Update the best path
                self.best_path_length = path_length  # Update the best path length

    def calculate_path_length(self, path):
        # Calculate the total length of a path
        return sum(self.distances[path[i]][path[(i + 1) % self.n_cities]] for i in range(self.n_cities))

# Generate random coordinates for 10 cities (for demonstration purposes)
np.random.seed(42)  # For reproducibility of random values
cities = np.random.rand(10, 2) * 100  # Random coordinates in a 100x100 grid

# Compute the distance matrix using Euclidean distance between cities
def calculate_distances(cities):
    n = len(cities)
    distances = np.zeros((n, n))  # Initialize a matrix to store distances
    for i in range(n):
        for j in range(n):
            distances[i, j] = np.linalg.norm(cities[i] - cities[j])  # Calculate Euclidean distance
    return distances

distances = calculate_distances(cities)  # Generate the distance matrix

# Initialize and run the ACO algorithm with 10 ants and 50 iterations
aco = AntColonyOptimization(distances, n_ants=10, n_iterations=50, alpha=1, beta=2, rho=0.5, Q=10)
best_path, best_path_length = aco.run()  # Run the optimization

# Visualize the result using Matplotlib
plt.figure(figsize=(10, 8))  # Set figure size for better clarity
plt.scatter(cities[:, 0], cities[:, 1], c='red', s=50)  # Plot the cities as red dots
for i in range(len(cities)):  # Annotate each city with its index
    plt.annotate(str(i), (cities[i, 0], cities[i, 1]), xytext=(5, 5), textcoords='offset points')
# Plot the best path found by the ACO
for i in range(len(best_path)):
    j = (i + 1) % len(best_path)  # Wrap around to the start of the path
    plt.plot([cities[best_path[i], 0], cities[best_path[j], 0]],  # Plot line connecting cities in the path
             [cities[best_path[i], 1], cities[best_path[j], 1]], 'b-')
plt.title(f"ACO for TSP - Best Path Length: {best_path_length:.2f}")  # Title with the best path length
plt.xlabel("X Coordinate")  # Label for x-axis
plt.ylabel("Y Coordinate")  # Label for y-axis
plt.show()  # Show the plot

# Print the optimization results
print("Optimization complete!")
print(f"Best path: {best_path}")  # Print the best path found
print(f"Best path length: {best_path_length:.2f}")  # Print the length of the best path
